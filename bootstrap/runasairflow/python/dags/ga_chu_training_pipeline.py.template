import datetime
from airflow.models import DAG
from airflow.operators.bash_operator import BashOperator

args = { 'owner': 'airflow',
         'start_date': START_DATE_AS_PY_CODE,
         'retries': 16,
         'retry_delay': datetime.timedelta(minutes=30) }

dag = DAG(dag_id='ga_chu_training_pipeline',
          default_args=args,
          schedule_interval='@weekly')

try:
    with open('/tmp/ga_chu_training_pipeline_today_as_str.txt', 'r') as f:
        today_as_str = f.read().strip()
except:
    today_as_str = ''

try:
    with open('/tmp/ga_chu_training_pipeline_unique_hash.txt', 'r') as f:
        unique_hash = f.read().strip()
except:
    unique_hash = ''

# Do not remove the extra space at the end (the one after 'runpysparkpreprocessor.sh')
task_3_run_pyspark_preprocessor_cmd_parts = [
    f'TODAY_AS_STR={today_as_str}',
    f'UNIQUE_HASH={unique_hash}',
    'TRAINING_OR_PREDICTION=training',
    'MODELS_DIR=/opt/models',
    'docker run --rm',
    '-v /opt/samplecode:/opt/samplecode',
    '-v /opt/models:/opt/models',
    '-e ENVIRONMENT_TYPE',
    '-e TODAY_AS_STR',
    '-e UNIQUE_HASH',
    '-e TRAINING_OR_PREDICTION',
    '-e MODELS_DIR',
    '-e MORPHL_SERVER_IP_ADDRESS',
    '-e MORPHL_CASSANDRA_USERNAME',
    '-e MORPHL_CASSANDRA_KEYSPACE',
    '-e MORPHL_CASSANDRA_PASSWORD',
    'pysparkcontainer',
    'bash /opt/samplecode/python/pyspark/runpysparkpreprocessor.sh ']
task_3_run_pyspark_preprocessor_cmd = ' '.join(task_3_run_pyspark_preprocessor_cmd_parts)

# Do not remove the extra space at the end (the one after 'move_metadata.sh')
task_4_move_metadata_cmd_parts = [
    f'TODAY_AS_STR={today_as_str}',
    f'UNIQUE_HASH={unique_hash}',
    'bash /opt/orchestrator/bootstrap/runasairflow/bash/move_metadata.sh ']
task_4_move_metadata_cmd = ' '.join(task_4_move_metadata_cmd_parts)

# Do not remove the extra space at the end (the one after 'rundaskpreprocessor.sh')
task_5_run_dask_preprocessor_cmd_parts = [
    f'TODAY_AS_STR={today_as_str}',
    f'UNIQUE_HASH={unique_hash}',
    'TRAINING_OR_PREDICTION=training',
    'MODELS_DIR=/opt/models',
    'docker run --rm',
    '-v /opt/scaler:/opt/scaler',
    '-v /opt/models:/opt/models',
    '-e ENVIRONMENT_TYPE',
    '-e TODAY_AS_STR',
    '-e UNIQUE_HASH',
    '-e TRAINING_OR_PREDICTION',
    '-e MODELS_DIR',
    '-e MORPHL_SERVER_IP_ADDRESS',
    'pysparkcontainer',
    'bash /opt/scaler/rundaskpreprocessor.sh ']
task_5_run_dask_preprocessor_cmd = ' '.join(task_5_run_dask_preprocessor_cmd_parts)

# Do not remove the extra space at the end (the one after 'mark_model_as_valid.sh')
task_7_mark_model_as_valid_cmd_parts = [
    f'TODAY_AS_STR={today_as_str}',
    f'UNIQUE_HASH={unique_hash}',
    'bash /opt/orchestrator/bootstrap/runasairflow/bash/mark_model_as_valid.sh ']
task_7_mark_model_as_valid_cmd = ' '.join(task_7_mark_model_as_valid_cmd_parts)

# Do not remove the extra space at the end (the one after 'truncate_tables_before_training_pipeline.sh')
task_1_truncate_tables = BashOperator(
    task_id='task_1_truncate_tables',
    bash_command='bash /opt/orchestrator/bootstrap/runasairflow/bash/truncate_tables_before_training_pipeline.sh ',
    dag=dag)

# Do not remove the extra space at the end (the one after 'generate_id_files_training.sh')
task_2_generate_id_files_training = BashOperator(
    task_id='task_2_generate_id_files_training',
    bash_command='bash /opt/orchestrator/bootstrap/runasairflow/bash/generate_id_files_training.sh ',
    dag=dag)

task_3_run_pyspark_preprocessor = BashOperator(
    task_id='task_3_run_pyspark_preprocessor',
    bash_command=task_3_run_pyspark_preprocessor_cmd,
    dag=dag)

task_4_move_metadata = BashOperator(
    task_id='task_4_move_metadata',
    bash_command=task_4_move_metadata_cmd,
    dag=dag)

task_5_run_dask_preprocessor = BashOperator(
    task_id='task_5_run_dask_preprocessor',
    bash_command=task_5_run_dask_preprocessor_cmd,
    dag=dag)

task_7_mark_model_as_valid = BashOperator(
    task_id='task_7_mark_model_as_valid',
    bash_command=task_7_mark_model_as_valid_cmd,
    dag=dag)

task_2_generate_id_files.set_upstream(task_1_truncate_tables)
task_3_run_pyspark_preprocessor.set_upstream(task_2_generate_id_files)
task_4_move_metadata.set_upstream(task_3_run_pyspark_preprocessor)
task_5_run_dask_preprocessor.set_upstream(task_4_move_metadata)
task_7_mark_model_as_valid.set_upstream(task_5_run_dask_preprocessor)
